// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OAnQuanWebAPI.Models;

namespace OAnQuanWebAPI.Migrations
{
    [DbContext(typeof(OAnQuanGameContext))]
    [Migration("20221017133213_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Vietnamese_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AchievementName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("achievementName");

                    b.Property<string>("Reward")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("reward");

                    b.HasKey("Id");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.AchievementUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("achievementId");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit")
                        .HasColumnName("isDone");

                    b.Property<int>("Progress")
                        .HasColumnType("int")
                        .HasColumnName("progress");

                    b.HasKey("UserId", "AchievementId")
                        .HasName("pk_achievementUser_id");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementUser");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("endTime");

                    b.Property<int>("NumberOfPlayer")
                        .HasColumnType("int")
                        .HasColumnName("number_of_player");

                    b.Property<int?>("PlayerStartId")
                        .HasColumnType("int")
                        .HasColumnName("player_start_Id");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int")
                        .HasColumnName("resultId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("startTime");

                    b.HasKey("Id");

                    b.HasIndex("PlayerStartId");

                    b.HasIndex("ResultId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("itemDescription");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("itemName");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("typeName");

                    b.HasKey("Id");

                    b.ToTable("ItemType");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Iventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("itemId");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Iventorys");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.LoginHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpDevice")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("IP_Device");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime")
                        .HasColumnName("login_time");

                    b.Property<DateTime>("LogoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_time");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("LoginHistory");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("playerId");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.RedeemCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.HasKey("Id");

                    b.ToTable("RedeemCode");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nickName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserRedeemCode", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("RedeemId")
                        .HasColumnType("int")
                        .HasColumnName("redeemId");

                    b.HasKey("UserId", "RedeemId")
                        .HasName("pk_redeemCode_id");

                    b.HasIndex("RedeemId");

                    b.ToTable("UserRedeemCode");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.AchievementUser", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.Achievement", "Achievement")
                        .WithMany("AchievementUsers")
                        .HasForeignKey("AchievementId")
                        .HasConstraintName("FK__Achieveme__achie__59063A47")
                        .IsRequired();

                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "User")
                        .WithMany("AchievementUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Achieveme__userI__5812160E")
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Game", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "PlayerStart")
                        .WithMany("Games")
                        .HasForeignKey("PlayerStartId")
                        .HasConstraintName("FK__Game__player_sta__48CFD27E");

                    b.HasOne("OAnQuanWebAPI.Models.Result", "Result")
                        .WithMany("Games")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK__Game__resultId__49C3F6B7");

                    b.Navigation("PlayerStart");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Item", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.ItemType", "Type")
                        .WithMany("Items")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK__Item__typeId__3D5E1FD2");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Iventory", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.Item", "Item")
                        .WithMany("Iventories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK__Iventorys__itemI__403A8C7D");

                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "Player")
                        .WithMany("Iventories")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK__Iventorys__playe__412EB0B6");

                    b.Navigation("Item");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.LoginHistory", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "Player")
                        .WithMany("LoginHistories")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK__LoginHist__playe__440B1D61");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Participant", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.Game", "Game")
                        .WithMany("Participants")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK__Participa__gameI__4D94879B");

                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "Player")
                        .WithMany("Participants")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK__Participa__playe__4CA06362");

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserAccount", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.UserRole", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__UserAccou__roleI__38996AB5");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserRedeemCode", b =>
                {
                    b.HasOne("OAnQuanWebAPI.Models.RedeemCode", "Redeem")
                        .WithMany("UserRedeemCodes")
                        .HasForeignKey("RedeemId")
                        .HasConstraintName("FK__UserRedee__redee__534D60F1")
                        .IsRequired();

                    b.HasOne("OAnQuanWebAPI.Models.UserAccount", "User")
                        .WithMany("UserRedeemCodes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserRedee__userI__52593CB8")
                        .IsRequired();

                    b.Navigation("Redeem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Achievement", b =>
                {
                    b.Navigation("AchievementUsers");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Game", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Item", b =>
                {
                    b.Navigation("Iventories");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.ItemType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.RedeemCode", b =>
                {
                    b.Navigation("UserRedeemCodes");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.Result", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserAccount", b =>
                {
                    b.Navigation("AchievementUsers");

                    b.Navigation("Games");

                    b.Navigation("Iventories");

                    b.Navigation("LoginHistories");

                    b.Navigation("Participants");

                    b.Navigation("UserRedeemCodes");
                });

            modelBuilder.Entity("OAnQuanWebAPI.Models.UserRole", b =>
                {
                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
